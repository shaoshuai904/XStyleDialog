apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir("outputs/jacoco_report/coverage_20241129/")
}

android {
    buildTypes {
        debug {
            /**打开覆盖率统计开关**/
            testCoverageEnabled = true
        }
    }
}

// 如果使用了 Robolectric 务必添加
tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
}

// 本地 .ec 文件路径
def jacocoPartsDir = "$buildDir/outputs/jacoco_report"
// 指定合并后的文件路径
//def mergedEcFile = "$buildDir/outputs/jacoco_marged/merged.ec"
def mergedEcFile = "$buildDir/outputs/jacoco_report/coverage_20241129.ec"

// 1. 初始化 Jacoco Task
tasks.register('jacocoInit') {
    group = "JacocoReport"
    doFirst {
        println("ec文件:${project.getRootDir()}")
        File file = new File(jacocoPartsDir)
        if (!file.exists()) {
            file.mkdir()
        }
    }
}

// 2. 将手机上的 .ec 文件拉取到指定位置 Task
tasks.register('jacocoPullEcFile') {
    group = "JacocoReport"
    doLast {
        // 指定设备上的文件路径
        def appId = android.defaultConfig.applicationId
        def deviceFilePath = "/storage/emulated/0/Android/data/${appId}/files/coverage.ec"
        // 检查设备上的文件是否存在
        def fileExists = exec {
            commandLine 'adb', 'shell', 'test', '-e', deviceFilePath
            ignoreExitValue true
        }
        def exists = fileExists.exitValue == 0
        println("coverage.ec file exist: ${exists}")
//        def timestamp = new Date().format('yyyyMMdd_HHmmss', TimeZone.getTimeZone('Asia/Shanghai'))
//        def localCoverageEcFile = "${jacocoPartsDir}/coverage_${timestamp}.ec"
        def localCoverageEcFile = mergedEcFile
        if (exists) {
            exec {
                commandLine 'adb', 'pull', deviceFilePath, localCoverageEcFile
            }
            println "File downloaded to ${localCoverageEcFile}"
        } else {
            // 文件不存在
            println "File does not exist at ${deviceFilePath}"
        }
    }
}

// 2+. 合并多个.ec文件
tasks.register('jacocoMergeEcFile', JacocoMerge) {
    group = "JacocoReport"

    destinationFile = new File(mergedEcFile)
    executionData = project.files([])
    doFirst {
        File jacocoExecDir = new File(jacocoPartsDir)
        if (jacocoExecDir.exists()) {
            executionData jacocoExecDir.listFiles()
                    .findAll {
                        it.name.endsWith(".ec")
                    }
        }
    }
}

// 源代码路径，有多少个module，就在这里写多少个路径，如果你只有app一个module，那么就写一个就可以
// e.g: /Users/work/GitHub/IShare/app/src/main/java
def coverageSourceDirs = [
        "$project.projectDir/src/main/java"
        , "$project.rootDir/msdialog/src/main/java"
]

// class文件路径（以项目 class 文件所在目录为准），如果你只有app一个module，那么就写一个就可以
// e.g: /Users/work/GitHub/IShare/app/build/intermediates/javac/debug/classes
def coverageClassDirs = [
        "$project.buildDir/intermediates/javac/debug/classes"
        , "$project.buildDir/tmp/kotlin-classes/debug"
        , "$project.rootDir/msdialog/build/intermediates/javac/debug/classes"
        , "$project.rootDir/msdialog/build/tmp/kotlin-classes/debug"
]

//忽略类文件配置
def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*$InjectAdapter.class',
        '**/*$ModuleAdapter.class',
        '**/*$ViewInjector*.class'
]

// 3. 具体解析ec文件的任务，会根据我们指定的class路径、源码路径、ec路径进行解析输出
tasks.register('jacocoTestReport', JacocoReport) {
    group = "JacocoReport"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.enabled(true)
        html.enabled(true)
    }

    println("设置需要检测覆盖率的源码目录:" + coverageSourceDirs)
    getSourceDirectories().setFrom(files(coverageSourceDirs))

    println("设置class文件目录:" + coverageClassDirs)
    println("设置过滤文件:" + fileFilter)
    getClassDirectories().setFrom(files(files(coverageClassDirs).files.collect {
        println("class 文件目录:" + it)
        fileTree(dir: it, excludes: fileFilter)
    }))

    println("需要检测的.ec文件:" + mergedEcFile)
    getExecutionData().setFrom(files(mergedEcFile))

    doFirst {
        // 遍历class路径下的所有文件，替换字符
        coverageClassDirs.each { path ->
            new File(path).eachFileRecurse { file ->
                if (file.name.contains('$$')) {
                    file.renameTo(file.path.replace('$$', '$'))
                }
            }
        }
    }
}

// 4. 指标验证
//tasks.register('jacocoTestCoverageVerification', JacocoReport) {
//    group = "JacocoReport"
//    doLast {
//        violationRules {
//            rule {
//                limit {
//                    minimum = "0.5".toBigDecimal()
//                }
//            }
//
//            rule {
//                isEnabled = false
//                element = "CLASS"
//                includes = listOf("org.gradle.*")
//
//                limit {
//                    counter = "LINE"
//                    value = "TOTALCOUNT"
//                    maximum = "0.3".toBigDecimal()
//                }
//            }
//        }
//    }
//}



